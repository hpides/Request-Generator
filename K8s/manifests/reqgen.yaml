apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pdgf-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: pdgf-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request-generator-deployment
  labels:
    app: request-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request-generator
  template:
    metadata:
      labels:
        app: request-generator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      volumes:
        - name: reqgen-pv-storage
          persistentVolumeClaim:
            claimName: pdgf-pv-claim
      containers:
        - name: request-generator
          image: localhost:5000/requestgenerator:${tag}
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: JVM_OPTS
              value: "" #-XX:+UseSerialGC"
            - name: EXTRA_ARGUMENTS
              value: "--location http://requestgenerator --bufferSize 1 --logging.level.root=error"
          volumeMounts:
            - mountPath: "/pdgf"
              name: reqgen-pv-storage
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: requestgenerator
spec:
  selector:
    app: request-generator
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      name: external
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: internal
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: request-generator-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: request-generator
              servicePort: 80
      host: request-generator
