#
# WALT - A realistic load generator for web applications.
#
# Copyright 2020 Eric Ackermann <eric.ackermann@student.hpi.de>, Hendrik Bomhardt
# <hendrik.bomhardt@student.hpi.de>, Benito Buchheim
# <benito.buchheim@student.hpi.de>, Juergen Schlossbauer
# <juergen.schlossbauer@student.hpi.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pdgf-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: pdgf-storage
  resources:
    requests:
      storage: 1Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pdgf-output-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: output-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request-generator-deployment
  labels:
    app: request-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request-generator
  template:
    metadata:
      labels:
        app: request-generator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      volumes:
        - name: reqgen-pv-storage
          persistentVolumeClaim:
            claimName: pdgf-pv-claim
        - name: reqgen-output-storage
          persistentVolumeClaim:
            claimName: pdgf-output-claim
      containers:
        - name: request-generator
          image: localhost:5000/requestgenerator:${tag}
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: JVM_OPTS
              value: "-XX:MaxRAM=1G -Xmx512M" #-XX:+UseSerialGC"
            - name: EXTRA_ARGUMENTS
              value: "--location http://requestgenerator --bufferSize 1 --logging.level.root=error --alternative-output-dir /output"
          volumeMounts:
            - mountPath: "/pdgf"
              name: reqgen-pv-storage
            - mountPath: "/output"
              name: reqgen-output-storage
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: requestgenerator
spec:
  selector:
    app: request-generator
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      name: external
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: internal
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: request-generator-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: request-generator
              servicePort: 80
      host: request-generator
